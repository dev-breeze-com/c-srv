# Tsert.Com Copyright (C) 2015 <MIT>.

#
# Project Properties
#
CMAKE_MINIMUM_REQUIRED (VERSION 2.8)
PROJECT ("qhttpsrv")
SET (APPLICATION_NAME "qhttpsrv")
SET (APPLICATION_CODENAME "${PROJECT_NAME}")
SET (APPLICATION_COPYRIGHT_YEARS "2016")
SET (APPLICATION_VERSION_MAJOR "0")
SET (APPLICATION_VERSION_MINOR "9")
SET (APPLICATION_VERSION_PATCH "0")
SET (APPLICATION_VERSION_TYPE "Release")
SET (APPLICATION_VERSION_STRING "${APPLICATION_VERSION_MAJOR}.${APPLICATION_VERSION_MINOR}.${APPLICATION_VERSION_PATCH}-${APPLICATION_VERSION_TYPE}")
SET (APPLICATION_VENDOR_ID "tsert.com")
SET (APPLICATION_VENDOR_NAME "Tsert.Com")
SET (APPLICATION_VENDOR_URL "www.breezeos.com")
SET (APPLICATION_ID "${APPLICATION_VENDOR_ID}.${PROJECT_NAME}")

#
# Target processor
#
SET(NULLARG "")
SET(ARCH "$ENV{ARCH}")
SET(MARCH "$ENV{MARCH}")
IF (ARCH STREQUAL NULLARG OR ARCH STREQUAL "i486")
	SET(ARCH "i486")
	SET(USRLIB "/usr/lib")
	SET(CMAKE_SYSTEM_PROCESSOR "i486")
ELSE ()
	# i486 i686 x86_64 athlon64 corei7
	SET(USRLIB "/usr/lib64")
	SET(LIB_SUFFIX "64")
	SET(CMAKE_SYSTEM_PROCESSOR "${ARCH}")
	SET (CMAKE_LIBRARY_ARCHITECTURE "${ARCH}")
ENDIF ()

#
# Package Compression Type
#
SET(CMAKE_ZIPMODE "$ENV{CMAKE_ZIPMODE}")
IF (CMAKE_ZIPMODE STREQUAL NULLARG)
	SET(CMAKE_ZIPMODE "TGZ")
ENDIF (CMAKE_ZIPMODE STREQUAL NULLARG)

SET (CMAKE_SYSTEM_IGNORE_PATH
	"^.*(/CVS/|/[.]svn/|/[.]git|[.]swp$|[.]#|/#|.*~|cscope).*$"
)

SET (CMAKE_IGNORE_PATH
	"^.*(/CVS/|/[.]svn/|/[.]git|[.]swp$|[.]#|/#|.*~|cscope).*$"
)

#
# Install path
#
SET (CMAKE_INSTALL_PREFIX "/usr")

#
# Type of compilation
#
IF(NOT CMAKE_BUILD_TYPE)
	SET(CMAKE_BUILD_TYPE "$ENV{BUILD_TYPE}")
ENDIF(NOT CMAKE_BUILD_TYPE)

IF(NOT CMAKE_BUILD_TYPE)
	SET (CMAKE_BUILD_TYPE "Release")
#	SET (CMAKE_BUILD_TYPE "RelWithDebInfo")
#	SET (CMAKE_BUILD_TYPE "Debug")
ENDIF(NOT CMAKE_BUILD_TYPE)

#
# Show each command line as it is used
SET (CMAKE_VERBOSE_MAKEFILE 0)

#
# Do not create static library
#
SET (BUILD_SHARED_LIBS ON)
SET (BUILD_STATIC_LIBS OFF)
SET (CREATE_STATIC_LIBRARY 0)

SET (project_build_shared 1)
SET (project_build_static 0)

#
# Prepend include directories
#
SET (CMAKE_INCLUDE_DIRECTORIES_BEFORE 1)

INCLUDE(TestForANSIStreamHeaders)
INCLUDE(CheckTypeSize)
INCLUDE(CheckIncludeFiles)
INCLUDE(CheckIncludeFileCXX)
INCLUDE(CheckCXXCompilerFlag)
INCLUDE(TestForSTDNamespace)
INCLUDE(TestForANSIForScope)
INCLUDE(TestForSSTREAM)
INCLUDE(FindPkgConfig)
INCLUDE(UsePkgConfig)

#
# Check headers
#
SET(INCLUDES "")

MACRO (LA_CHECK_INCLUDE_FILE header var)
	CHECK_INCLUDE_FILES("${INCLUDES};${header}" ${var})
	IF (${var})
		SET(INCLUDES ${INCLUDES} ${header})
	ENDIF (${var})
ENDMACRO (LA_CHECK_INCLUDE_FILE)

# Alphabetize the rest unless there's a compelling reason
LA_CHECK_INCLUDE_FILE("acl/libacl.h" HAVE_ACL_LIBACL_H)

LA_CHECK_INCLUDE_FILE("ctype.h" HAVE_CTYPE_H)
LA_CHECK_INCLUDE_FILE("copyfile.h" HAVE_COPYFILE_H)
LA_CHECK_INCLUDE_FILE("direct.h" HAVE_DIRECT_H)
LA_CHECK_INCLUDE_FILE("dlfcn.h" HAVE_DLFCN_H)
LA_CHECK_INCLUDE_FILE("errno.h" HAVE_ERRNO_H)

LA_CHECK_INCLUDE_FILE("fcntl.h" HAVE_FCNTL_H)
LA_CHECK_INCLUDE_FILE("grp.h" HAVE_GRP_H)
LA_CHECK_INCLUDE_FILE("inttypes.h" HAVE_INTTYPES_H)
LA_CHECK_INCLUDE_FILE("io.h" HAVE_IO_H)
LA_CHECK_INCLUDE_FILE("langinfo.h" HAVE_LANGINFO_H)
LA_CHECK_INCLUDE_FILE("limits.h" HAVE_LIMITS_H)

LA_CHECK_INCLUDE_FILE("locale.h" HAVE_LOCALE_H)
LA_CHECK_INCLUDE_FILE("memory.h" HAVE_MEMORY_H)
LA_CHECK_INCLUDE_FILE("paths.h" HAVE_PATHS_H)
LA_CHECK_INCLUDE_FILE("poll.h" HAVE_POLL_H)
LA_CHECK_INCLUDE_FILE("process.h" HAVE_PROCESS_H)
LA_CHECK_INCLUDE_FILE("pthread.h" HAVE_PTHREAD_H)
LA_CHECK_INCLUDE_FILE("pwd.h" HAVE_PWD_H)

LA_CHECK_INCLUDE_FILE("regex.h" HAVE_REGEX_H)
LA_CHECK_INCLUDE_FILE("signal.h" HAVE_SIGNAL_H)
LA_CHECK_INCLUDE_FILE("spawn.h" HAVE_SPAWN_H)
LA_CHECK_INCLUDE_FILE("stdarg.h" HAVE_STDARG_H)
LA_CHECK_INCLUDE_FILE("stdint.h" HAVE_STDINT_H)
LA_CHECK_INCLUDE_FILE("stdlib.h" HAVE_STDLIB_H)
LA_CHECK_INCLUDE_FILE("string.h" HAVE_STRING_H)
LA_CHECK_INCLUDE_FILE("strings.h" HAVE_STRINGS_H)
LA_CHECK_INCLUDE_FILE("sys/acl.h" HAVE_SYS_ACL_H)
LA_CHECK_INCLUDE_FILE("sys/cdefs.h" HAVE_SYS_CDEFS_H)
LA_CHECK_INCLUDE_FILE("sys/ioctl.h" HAVE_SYS_IOCTL_H)
LA_CHECK_INCLUDE_FILE("sys/mkdev.h" HAVE_SYS_MKDEV_H)
LA_CHECK_INCLUDE_FILE("sys/mount.h" HAVE_SYS_MOUNT_H)
LA_CHECK_INCLUDE_FILE("sys/param.h" HAVE_SYS_PARAM_H)
LA_CHECK_INCLUDE_FILE("sys/poll.h" HAVE_SYS_POLL_H)
LA_CHECK_INCLUDE_FILE("sys/select.h" HAVE_SYS_SELECT_H)
LA_CHECK_INCLUDE_FILE("sys/stat.h" HAVE_SYS_STAT_H)
LA_CHECK_INCLUDE_FILE("sys/statfs.h" HAVE_SYS_STATFS_H)
LA_CHECK_INCLUDE_FILE("sys/statvfs.h" HAVE_SYS_STATVFS_H)
LA_CHECK_INCLUDE_FILE("sys/time.h" HAVE_SYS_TIME_H)
LA_CHECK_INCLUDE_FILE("sys/utime.h" HAVE_SYS_UTIME_H)
LA_CHECK_INCLUDE_FILE("sys/utsname.h" HAVE_SYS_UTSNAME_H)
LA_CHECK_INCLUDE_FILE("sys/vfs.h" HAVE_SYS_VFS_H)
LA_CHECK_INCLUDE_FILE("sys/wait.h" HAVE_SYS_WAIT_H)
LA_CHECK_INCLUDE_FILE("time.h" HAVE_TIME_H)
LA_CHECK_INCLUDE_FILE("unistd.h" HAVE_UNISTD_H)
LA_CHECK_INCLUDE_FILE("utime.h" HAVE_UTIME_H)
LA_CHECK_INCLUDE_FILE("wchar.h" HAVE_WCHAR_H)
LA_CHECK_INCLUDE_FILE("wctype.h" HAVE_WCTYPE_H)

#
# Check for integer types
#
#
CHECK_TYPE_SIZE("short" SIZE_OF_SHORT)
CHECK_TYPE_SIZE("int" SIZE_OF_INT)
CHECK_TYPE_SIZE("long" SIZE_OF_LONG)
CHECK_TYPE_SIZE("long long"     SIZE_OF_LONG_LONG)

CHECK_TYPE_SIZE("unsigned short" SIZE_OF_UNSIGNED_SHORT)
CHECK_TYPE_SIZE("unsigned" SIZE_OF_UNSIGNED)
CHECK_TYPE_SIZE("unsigned long" SIZE_OF_UNSIGNED_LONG)
CHECK_TYPE_SIZE("unsigned long long" SIZE_OF_UNSIGNED_LONG_LONG)

CHECK_TYPE_SIZE("__int64" __INT64)
CHECK_TYPE_SIZE("unsigned __int64" UNSIGNED___INT64)

CHECK_TYPE_SIZE(int16_t INT16_T)
CHECK_TYPE_SIZE(int32_t INT32_T)
CHECK_TYPE_SIZE(int64_t INT64_T)
CHECK_TYPE_SIZE(intmax_t INTMAX_T)
CHECK_TYPE_SIZE(uint8_t UINT8_T)
CHECK_TYPE_SIZE(uint16_t UINT16_T)
CHECK_TYPE_SIZE(uint32_t UINT32_T)
CHECK_TYPE_SIZE(uint64_t UINT64_T)
CHECK_TYPE_SIZE(uintmax_t UINTMAX_T)

CHECK_TYPE_SIZE(off_t OFF_T)
IF(NOT HAVE_OFF_T)
	SET(off_t "__int64")
ENDIF(NOT HAVE_OFF_T)

CHECK_TYPE_SIZE(ssize_t SSIZE_T)
IF(NOT HAVE_SSIZE_T)
	IF("${CMAKE_SIZEOF_VOID_P}" EQUAL 8)
		SET(ssize_t "int64_t")
	ELSE("${CMAKE_SIZEOF_VOID_P}" EQUAL 8)
		SET(ssize_t "long")
	ENDIF("${CMAKE_SIZEOF_VOID_P}" EQUAL 8)
ENDIF(NOT HAVE_SSIZE_T)

CHECK_TYPE_SIZE(uid_t UID_T)
IF(NOT HAVE_UID_T)
	IF(WIN32)
		SET(uid_t "short")
	ELSE(WIN32)
		SET(uid_t "unsigned int")
	ENDIF(WIN32)
ENDIF(NOT HAVE_UID_T)

CHECK_TYPE_SIZE(pid_t PID_T)
IF(NOT HAVE_PID_T)
	IF(WIN32)
		SET(pid_t "int")
	ELSE(WIN32)
		MESSAGE(FATAL_ERROR "pid_t doesn't exist on this platform?")
	ENDIF(WIN32)
ENDIF(NOT HAVE_PID_T)

#
# Configure Compile Flags
#
SET(CMAKE_REQUIRED_FLAGS "-Wall -Wformat -Wformat-security")
#SET(CMAKE_REQUIRED_FLAGS "-Wall -Wformat -Wformat-security -fpermissive")
SET(CMAKE_REQUIRED_LIBRARIES "uuid")

SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c99 -D_${ARCH}_ -march=${MARCH}" )
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Wformat -Wformat-security" )
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fpic -fPIC -DPIC" )
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fvisibility=default" )
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fstack-protector-all" )

SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -D_${ARCH}_ -march=${MARCH}" )
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wformat -Wformat-security" )
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fpic -fPIC -DPIC" )
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fvisibility=default" )
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fstack-protector-all" )

#
# Configure Load Flags
#
LINK_LIBRARIES("uuid")
LINK_LIBRARIES("pthread")

# Get the compiler command line to build this project.
SET(CXX "$ENV{CXX}")
SET(DISTRO "$ENV{DISTRO}")
SET(GNU_CXX_VERSION "4.8.2")

IF (NOT DEFINED DISTRO OR DISTRO STREQUAL "")
	SET (DISTRO "slackware")
ENDIF () #NOT DEFINED DISTRO OR DISTRO STREQUAL "")

IF (NOT DEFINED CXX OR CXX STREQUAL "")
	SET (CC "gcc")
	SET (CXX "g++")
ENDIF () #NOT DEFINED CXX OR CXX STREQUAL "")

IF (CMAKE_C_COMPILER_ID MATCHES "^GNU$")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -rdynamic -D_GNU_SOURCE")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fdump-class-hierarchy" )
ENDIF () #CMAKE_C_COMPILER_ID MATCHES "^Gnu$")

IF (CMAKE_C_COMPILER_ID MATCHES "^clang$" OR CMAKE_CXX_COMPILER_ID MATCHES "^Clang[+][+]$")
	SET(CMAKE_CXX_FLAGS "-D_GNU_SOURCE -D_CLANG_ ${CMAKE_CXX_FLAGS}")
	SET(CMAKE_CXX_FLAGS "-stdlib=libc++ ${CMAKE_CXX_FLAGS}")
	SET(CMAKE_CXX_FLAGS "-Qunused-arguments ${CMAKE_CXX_FLAGS}")
	LINK_LIBRARIES("c++" "c++abi")

	INCLUDE (CMakeForceCompiler)
	SET(CMAKE_SYSTEM_NAME Generic)
	CMAKE_FORCE_C_COMPILER (clang LLVM-Clang)
	CMAKE_FORCE_CXX_COMPILER (clang LLVM-Clang)
ENDIF ()

#
# Add Preprocessor Defines
#
IF (USE_PTH)
	ADD_DEFINITIONS(-DPTH_THREAD)
ENDIF (USE_PTH)

ADD_DEFINITIONS(
	-D_FILE_OFFSET_BITS=64
	-DSQLITE_HAS_CODEC
	-D_REENTRANT
	-D_7ZIP_ST
)

#
# Project Output Paths
#
SET (MAINFOLDER ${PROJECT_SOURCE_DIR})
SET (LIBRARY_OUTPUT_PATH "${MAINFOLDER}/lib")
SET (EXECUTABLE_OUTPUT_PATH "${MAINFOLDER}/bin")

#
# Set pkg-config Search Paths
#
SET(ENV{PKG_CONFIG_PATH}
	"${USRLIB}/${ARCH}-linux-gnu/pkgconfig"
	"/usr/share/pkgconfig"
	"${USRLIB}/pkgconfig"
)

#
# Project Search Paths
#
#LIST (APPEND CMAKE_PREFIX_PATH "/opt")
#LIST (APPEND CMAKE_PREFIX_PATH "/usr")
LIST (APPEND CMAKE_PREFIX_PATH "${MAINFOLDER}")
LIST (APPEND CMAKE_PREFIX_PATH "${MAINFOLDER}/tools")
SET (CMAKE_MODULE_PATH
	"/usr/share/cmake/Modules"
	"/var/cache/cmake/Modules"
	${MAINFOLDER}/tools/share/cmake
)
INCLUDE_DIRECTORIES("${MAINFOLDER}/include")
#INCLUDE(FILE "${MAINFOLDER}/include")

FIND_PACKAGE (BZip2 REQUIRED)
IF (BZIP2_FOUND)
	INCLUDE_DIRECTORIES(${BZIP_INCLUDE_DIRS})
	LINK_LIBRARIES (${BZIP_LIBRARIES})
ENDIF (BZIP2_FOUND)

FIND_PACKAGE (ZLIB REQUIRED)
IF (ZLIB_FOUND)
	INCLUDE_DIRECTORIES(${ZLIB_INCLUDE_DIRS})
	LINK_LIBRARIES (${ZLIB_LIBRARIES})
ENDIF (ZLIB_FOUND)

FIND_LIBRARY(LibPCRE_FOUND "pcre" PATHS "${USRLIB}")
IF (LibPCRE_FOUND)
	INCLUDE_DIRECTORIES (BEFORE "/usr/include/pcre/")
	LINK_LIBRARIES ("pcre")
	MESSAGE(STATUS "pcre found: libpcre.so")
ENDIF (LibPCRE_FOUND)

FIND_LIBRARY(LibPCREPOSIX_FOUND "pcreposix" PATHS "${USRLIB}")
IF (LibPCREPOSIX_FOUND)
	INCLUDE_DIRECTORIES (BEFORE "/usr/include/pcreposix/")
#   LINK_DIRECTORIES(" -L/opt/lib")
	LINK_LIBRARIES ("pcreposix")
	MESSAGE(STATUS "pcreposix found: libpcreposix.so")
ENDIF (LibPCREPOSIX_FOUND)

FIND_LIBRARY(LibQtMimeTypes_FOUND "QtMimeTypes" PATHS "${USRLIB}")
IF (LibQtMimeTypes_FOUND)
    INCLUDE_DIRECTORIES (BEFORE "/usr/include/QtMimeTypes/")
	LINK_LIBRARIES ("QtMimeTypes")
	MESSAGE(STATUS "Found QtMimeTypes: ${USRLIB}/libQtMimeTypes.so")
ELSE(LibQtMimeTypes_FOUND)
	MESSAGE(FATAL_ERROR "Package QtMimeTypes required, but not found")
ENDIF()

FIND_LIBRARY(LibQJson_FOUND "qjson-backport" PATHS "${USRLIB}")
IF (LibQJson_FOUND)
    INCLUDE_DIRECTORIES (BEFORE "/usr/include/qjson-backport/")
	LINK_LIBRARIES ("qjson-backport")
	MESSAGE(STATUS "Found qjson-backport: ${USRLIB}/libqjson-backport.so")
ELSE(LibQJson_FOUND)
	MESSAGE(FATAL_ERROR "Package qjson-backport required, but not found")
ENDIF()

# Add QT4 dependencies
SET(QT4 ON)
SET(CMAKE_AUTOMOC TRUE)
SET(CMAKE_AUTOUIC TRUE)
SET(CMAKE_AUTORCC TRUE)
SET(CMAKE_INCLUDE_CURRENT_DIR TRUE)
SET(CMAKE_AUTOMOC_RELAXED_MODE TRUE)

FIND_PACKAGE(Qt4 4.8.2 REQUIRED QtCore QtNetwork)
IF (QT4_FOUND)
	INCLUDE_DIRECTORIES(${QT_INCLUDES})
	LINK_LIBRARIES(${QT_LIBRARIES} ${QT_QTCORE_LIBRARY} ${QT_QTNETWORK_LIBRARY})
ENDIF (QT4_FOUND)

#
# Configure Files
#
FILE (GLOB_RECURSE CONFIGINPUTS1 include/*.in.h.cmake)
FILE (GLOB_RECURSE CONFIGINPUTS2 include/*.h.in.cmake)
FILE (GLOB_RECURSE CONFIGINPUTS3 src/*.in.h.cmake)
FILE (GLOB_RECURSE CONFIGINPUTS4 src/*.h.in.cmake)
FILE (GLOB_RECURSE CONFIGINPUTS5 test/*.in.h.cmake)
FILE (GLOB_RECURSE CONFIGINPUTS6 test/*.h.in.cmake)
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS1}")
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS2}")
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS3}")
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS4}")
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS5}")
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS6}")
FOREACH (CONFIGINPUT ${CONFIGINPUTS})
STRING (REPLACE ".in.h.cmake" ".h" CONFIGOUTPUT1 "${CONFIGINPUT}")
STRING (REPLACE ".h.in.cmake" ".h" CONFIGOUTPUT2 "${CONFIGOUTPUT1}")
CONFIGURE_FILE ("${CONFIGINPUT}" "${CONFIGOUTPUT2}")
ENDFOREACH (CONFIGINPUT ${CONFIGINPUTS})

OPTION(BUILD_STATIC "Build a static library" OFF)
OPTION(BUILD_DOC "Build Doxygen documentation" OFF)
OPTION(BUILD_EXAMPLES "Build the example applications" OFF)
OPTION(BUILD_TESTS "Build the test suite" OFF)

#
# Add Build Targets
#
ADD_SUBDIRECTORY(src)
#ADD_SUBDIRECTORY(test)

IF(BUILD_DOC)
	ADD_SUBDIRECTORY(docs)
ENDIF()

IF(BUILD_EXAMPLES)
	ADD_SUBDIRECTORY(examples)
ENDIF()

IF(BUILD_TESTS)
	enable_testing()
	ADD_SUBDIRECTORY(tests)
ENDIF()

#
# Add Install Targets
#
SET (PROJECT_INCLUDES "${MAINFOLDER}/include/${PROJECT_NAME}")
IF (EXISTS "${PROJECT_INCLUDES}" AND IS_DIRECTORY "${PROJECT_INCLUDES}")
	INSTALL(DIRECTORY "${PROJECT_INCLUDES}" DESTINATION "include")
ENDIF (EXISTS "${PROJECT_INCLUDES}" AND IS_DIRECTORY "${PROJECT_INCLUDES}")

IF (EXISTS "${MAINFOLDER}/include" AND IS_DIRECTORY "${MAINFOLDER}/include")
	INSTALL(DIRECTORY "${MAINFOLDER}/include/" DESTINATION "include/${PROJECT_NAME}" FILES_MATCHING PATTERN "include/*.h")
	INSTALL(DIRECTORY "${MAINFOLDER}/include/" DESTINATION "include/${PROJECT_NAME}" FILES_MATCHING PATTERN "include/Q*")
ENDIF (EXISTS "${MAINFOLDER}/include" AND IS_DIRECTORY "${MAINFOLDER}/include")

INSTALL(FILES "INSTALL" DESTINATION "${CMAKE_INSTALL_PREFIX}/share/qhttpsrv/")
INSTALL(FILES "AUTHORS" DESTINATION "${CMAKE_INSTALL_PREFIX}/share/qhttpsrv/")
INSTALL(FILES "README" DESTINATION "${CMAKE_INSTALL_PREFIX}/share/qhttpsrv/")
INSTALL(FILES "LICENSE" DESTINATION "${CMAKE_INSTALL_PREFIX}/share/qhttpsrv/")
INSTALL(FILES "README.qhttpengine" DESTINATION "${CMAKE_INSTALL_PREFIX}/share/qhttpsrv/")
INSTALL(FILES "LICENSE.qhttpengine" DESTINATION "${CMAKE_INSTALL_PREFIX}/share/qhttpsrv/")
INSTALL(FILES "qhttpsrv.pc" DESTINATION "${CMAKE_INSTALL_PREFIX}/lib/pkgconfig/")

#
# Add Documentation Targets
#
#INCLUDE(DocumentationTargets)

SET(CPACK_PACKAGE_VENDOR "Tsert.Com")
SET(CPACK_GENERATOR "${CMAKE_ZIPMODE}")
SET(CPACK_STRIP_FILES 1)
SET(CPACK_PACKAGE_VERSION_MAJOR 1)
SET(CPACK_PACKAGE_VERSION_MINOR 0)
SET(CPACK_PACKAGE_VERSION_PATCH 0)
SET(CPACK_SOURCE_GENERATOR "${CMAKE_ZIPMODE}")
SET(CPACK_PACKAGE_FILE_NAME lib${PROJECT_NAME}_${APPLICATION_VERSION_STRING}_${ARCH})
SET(CPACK_SOURCE_PACKAGE_FILE_NAME lib${PROJECT_NAME}_${APPLICATION_VERSION_STRING}_${ARCH})
SET(CPACK_PACKAGE_INSTALL_DIRECTORY "/var/cache/distro/archives/${ARCH}")
SET(CPACK_SOURCE_IGNORE_FILES
	"^.*(/CVS/|/[.]svn/|/[.]git|[.]swp$|[.]#|/#|~|cscope).*$"
#	"^.*(/CVS/;/[.]svn/;/[.]git;[.]swp$;[.]#;/#;~;cscope).*$"
)
SET(CPACK_RESOURCE_FILE_LICENSE
	"${MAINFOLDER}/LICENSE"
)
INCLUDE(CPack)

# Obfuscate files here ...
SET(OBFUSCATE "$ENV{CXXOBFUSCATE}")
IF (OBFUSCATE STREQUAL "yes")
	SET(CXXPROJ "$ENV{CXXPROJ}")
	IF (CXXPROJ STREQUAL NULLARG)
		MESSAGE(FATAL_ERROR "Project name missing -- needed for obfuscation !")
	ENDIF (CXXPROJ STREQUAL NULLARG)

	SET(CXXFOLDERS "src")
	SET(OBFUSCATE "grade-confuse")
	FOREACH(folder ${CXXFOLDERS})
		EXEC_PROGRAM( "${OBFUSCATE} -P ${CXXPROJ} ${folder}")
	ENDFOREACH(folder ${CXXFOLDERS})
ENDIF (OBFUSCATE STREQUAL "yes")

MESSAGE(STATUS "----------------------------------------------------------")
MESSAGE(STATUS "Module paths ${CMAKE_MODULE_PATH}")
MESSAGE(STATUS "----------------------------------------------------------")
MESSAGE(STATUS "C Compile Flags ${CMAKE_C_FLAGS}")
MESSAGE(STATUS "C Load Flags ${CMAKE_C_LDFLAGS}")
MESSAGE(STATUS "----------------------------------------------------------")
MESSAGE(STATUS "CXX Compile Flags ${CMAKE_CXX_FLAGS}")
MESSAGE(STATUS "CXX Load Flags ${CMAKE_CXX_LDFLAGS}")
MESSAGE(STATUS "----------------------------------------------------------")
MESSAGE(STATUS "System Name: ${CMAKE_SYSTEM}")
MESSAGE(STATUS "System Processor: ${CMAKE_SYSTEM_PROCESSOR}")
MESSAGE(STATUS "System Version: ${CMAKE_SYSTEM_VERSION}")
MESSAGE(STATUS "----------------------------------------------------------")
MESSAGE(STATUS "Build System: ${CMAKE_HOST_SYSTEM}")
MESSAGE(STATUS "Build System Name: ${CMAKE_HOST_SYSTEM_NAME}")
MESSAGE(STATUS "Build System Version: ${CMAKE_HOST_SYSTEM_VERSION}")
MESSAGE(STATUS "Build System Processor: ${CMAKE_HOST_SYSTEM_PROCESSOR}")
MESSAGE(STATUS "----------------------------------------------------------")
MESSAGE(STATUS "Target System: ${CMAKE_SYSTEM}")
MESSAGE(STATUS "Target System Name: ${CMAKE_SYSTEM_NAME}")
MESSAGE(STATUS "Target System Version: ${CMAKE_SYSTEM_VERSION}")
MESSAGE(STATUS "Target System Processor: ${CMAKE_SYSTEM_PROCESSOR}")
MESSAGE(STATUS "Target Library Architecture: ${CMAKE_LIBRARY_ARCHITECTURE}")
MESSAGE(STATUS "----------------------------------------------------------")
MESSAGE(STATUS "Distribution: ${DISTRO}")
MESSAGE(STATUS "----------------------------------------------------------")
MESSAGE(STATUS "Build Type: '${CMAKE_BUILD_TYPE}'")
MESSAGE(STATUS "Build Compiler: ${CMAKE_CXX_COMPILER_ID} ${CXX}")
MESSAGE(STATUS "Build Compiler Version: ${CMAKE_CXX_COMPILER_VERSION}")
MESSAGE(STATUS "Build GNU Compiler Version: ${GNU_CXX_VERSION}")
MESSAGE(STATUS "----------------------------------------------------------")
MESSAGE(STATUS "Build MOC Compiler: ${QT_MOC_EXECUTABLE}")
MESSAGE(STATUS "----------------------------------------------------------")

